function J = getGeometricJacobianPSM(q)
%getJacobianPSM Returns the geometric Jacobian at q
%   use pre-calculated analytical expression

theta1 = q(1);
theta2 = q(2);
d3 = q(3);
theta4 = q(4);
theta5 = q(5);
% theta6 = q(6);

J = [(91*sin(theta1)*sin(theta4)*sin(theta5))/10000 - (39*cos(theta1)*cos(theta2))/2500 + d3*cos(theta1)*cos(theta2) + (91*cos(theta1)*cos(theta2)*cos(theta5))/10000 - (91*cos(theta1)*cos(theta4)*sin(theta2)*sin(theta5))/10000, ...
    -(sin(theta1)*(91*cos(theta5)*sin(theta2) - 156*sin(theta2) + 10000*d3*sin(theta2) + 91*cos(theta2)*cos(theta4)*sin(theta5)))/10000, ...
    cos(theta2)*sin(theta1), ...
    -(91*sin(theta5)*(cos(theta1)*cos(theta4) - sin(theta1)*sin(theta2)*sin(theta4)))/10000, ...
    - (91*cos(theta2)*sin(theta1)*sin(theta5))/10000 - (91*cos(theta1)*cos(theta5)*sin(theta4))/10000 - (91*cos(theta4)*cos(theta5)*sin(theta1)*sin(theta2))/10000, 0; ...
    0, ...
    (39*cos(theta2))/2500 - (91*cos(theta2)*cos(theta5))/10000 - d3*cos(theta2) + (91*cos(theta4)*sin(theta2)*sin(theta5))/10000, ...
    -sin(theta2), ...
    (91*cos(theta2)*sin(theta4)*sin(theta5))/10000, ...
    (91*sin(theta2)*sin(theta5))/10000 - (91*cos(theta2)*cos(theta4)*cos(theta5))/10000, ...
    0; ...
    d3*cos(theta2)*sin(theta1) - (91*cos(theta1)*sin(theta4)*sin(theta5))/10000 - (39*cos(theta2)*sin(theta1))/2500 + (91*cos(theta2)*cos(theta5)*sin(theta1))/10000 - (91*cos(theta4)*sin(theta1)*sin(theta2)*sin(theta5))/10000, ...
    (cos(theta1)*(91*cos(theta5)*sin(theta2) - 156*sin(theta2) + 10000*d3*sin(theta2) + 91*cos(theta2)*cos(theta4)*sin(theta5)))/10000, ...
    -cos(theta1)*cos(theta2), ...
    -(91*sin(theta5)*(cos(theta4)*sin(theta1) + cos(theta1)*sin(theta2)*sin(theta4)))/10000, ...
    (91*cos(theta1)*cos(theta2)*sin(theta5))/10000 - (91*cos(theta5)*sin(theta1)*sin(theta4))/10000 + (91*cos(theta1)*cos(theta4)*cos(theta5)*sin(theta2))/10000, ...
    0; ...
    0, ...
    -cos(theta1), 0, ...
    cos(theta2)*sin(theta1), ...
    sin(theta1)*sin(theta2)*sin(theta4) - cos(theta1)*cos(theta4), ...
    - cos(theta2)*sin(theta1)*sin(theta5) - cos(theta1)*cos(theta5)*sin(theta4) - cos(theta4)*cos(theta5)*sin(theta1)*sin(theta2); ...
    -1, 0, 0, -sin(theta2), cos(theta2)*sin(theta4), sin(theta2)*sin(theta5) - cos(theta2)*cos(theta4)*cos(theta5); ...
    0, -sin(theta1), 0, -cos(theta1)*cos(theta2), ...
    - cos(theta4)*sin(theta1) - cos(theta1)*sin(theta2)*sin(theta4), ...
    cos(theta1)*cos(theta2)*sin(theta5) - cos(theta5)*sin(theta1)*sin(theta4) + cos(theta1)*cos(theta4)*cos(theta5)*sin(theta2)];
end